= render 'webcam_modal'

-# FORM
= simple_form_for(@guest, html: { class: 'guest-form form-horizontal' }) do |f|
  = f.error_notification

  .row-fluid
    .form-inputs.span6
      -# HIDDEN FIELD TO LINK WEBCAM PHOTO TO GUEST
      = f.hidden_field :webcam_photo_id

      -# REQUIRED FIELDS BEGIN
      .page-header
        %h4 required

      = f.input :first_name, autofocus: true
      = f.input :last_name
      = f.input :gender, collection: Guest.genders, as: :radio_buttons
      -# REQUIRED FIELDS END

      .page-header
        %h4 additional

      = f.input :birthday do
        = f.input_field :birthday, value: @guest.birthday.try(:strftime, '%e %B'),
          as: :string,
          'data-title' => raw("<i class='icon-gift'></i> birthday"),
          'data-content' => render('shared/date_hint_popover'),
          'data-placement' => 'left',
          'data-delay' => 0,
          'data-trigger' => 'focus',
          'selector' => '#notes-wrapper',
          rel: 'popover'
      = f.input :email
      - if can? :update_rating, @guest
        = f.input :rating, collection: Guest.ratings, as: :select
      = f.input :phone_number

      .row-fluid
        .span5
          Snap a webcam photo
        .span7
          %a.thumbnail.avatar.js-init-webcam(data-toggle='modal'
            href='#webcamModal')
            #avatar-placeholder
              - if @guest.last_photo.present?
                = image_tag @guest.last_photo.image.url(:medium)
              - else
                = image_tag 'placeholder_avatar.gif'
            %span.btn.btn-mini.btn-inverse
              %i.icon-camera.icon-white

      .row-fluid#photo-picker-wrapper
        .span5
          upload images on your computer
        .span7
          #photos
            = f.simple_fields_for :photos do |photo|
              = render 'photo_fields', f: photo
          .links
            = link_to_add_association f, :photos do
              %button.btn
                %i.icon-picture

      .row-fluid#notes-wrapper
        .span5
          add notes
        .span7
          #notes
            = f.simple_fields_for :notes do |note|
              = render 'note_fields', f: note
            .links
              = link_to_add_association f, :notes do
                %button.btn
                  %i.icon-edit


    .span6
      .submit-button
        %div(data-spy='affix' data-offset-top='330')
          = f.button :submit, class: 'btn-primary btn-large'



  :coffeescript
    jQuery ->
      $('.submit .affix').affix
        offset:
            x: 10
            y: 20
      webcamOptions =
        api_url: "#{photos_upload_path}"
        quality: 100
        swf_path: '/webcam.swf'
        play_sound: false
        sound_path: '/shutter.mp3'
        set_stealth: false
        div_id: '#webcam'
        width: 453
        height: 340
        serverWidth: 453
        serverHeight: 340
      webcamControls =
        displayWebcam: '.js-init-webcam'
        takePicture: '#js-snap'
        savePhoto: '#js-save-photo'
        submitForm: 'js-submit-form'
        reset: '#js-webcam-reset'
      new_guest_form = new window.VIP.GuestForm
        modal: '#webcamModal'
        webcamOptions: webcamOptions
        webcamControls: webcamControls
